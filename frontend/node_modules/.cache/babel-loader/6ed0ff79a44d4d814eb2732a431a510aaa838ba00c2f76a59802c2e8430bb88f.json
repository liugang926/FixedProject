{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport router from '@/router';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // 使用 /api 前缀\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    const token = getToken();\n    if (token) {\n      config.headers['Authorization'] = `Token ${token}`;\n    }\n  }\n  return config;\n}, error => {\n  // 处理请求错误\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // Django REST framework 返回的数据直接使用\n  return res;\n}, error => {\n  console.log('Request Error:', {\n    config: error.config,\n    response: error.response,\n    url: error.config?.url,\n    method: error.config?.method,\n    data: error.config?.data\n  });\n  // 如果是401错误，说明token失效，需要重新登录\n  if (error.response?.status === 401) {\n    store.dispatch('user/resetToken');\n    router.push('/login');\n  }\n  ElMessage({\n    message: error.response?.data?.detail || error.message || '请求失败',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","router","service","create","baseURL","timeout","interceptors","request","use","config","state","user","token","headers","error","console","log","Promise","reject","response","res","data","url","method","status","dispatch","push","message","detail","type","duration"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\nimport router from '@/router'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: '/api', // 使用 /api 前缀\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    if (store.state.user.token) {\r\n      const token = getToken()\r\n      if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`\r\n      }\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // 处理请求错误\r\n    console.log(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    \r\n    // Django REST framework 返回的数据直接使用\r\n    return res\r\n  },\r\n  error => {\r\n    console.log('Request Error:', {\r\n      config: error.config,\r\n      response: error.response,\r\n      url: error.config?.url,\r\n      method: error.config?.method,\r\n      data: error.config?.data\r\n    })\r\n    // 如果是401错误，说明token失效，需要重新登录\r\n    if (error.response?.status === 401) {\r\n      store.dispatch('user/resetToken')\r\n      router.push('/login')\r\n    }\r\n    ElMessage({\r\n      message: error.response?.data?.detail || error.message || '请求失败',\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,cAAc;AACvC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,IAAIV,KAAK,CAACW,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;IAC1B,MAAMA,KAAK,GAAGZ,QAAQ,CAAC,CAAC;IACxB,IAAIY,KAAK,EAAE;MACTH,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAASD,KAAK,EAAE;IACpD;EACF;EACA,OAAOH,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/BW,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,OAAOD,GAAG;AACZ,CAAC,EACDN,KAAK,IAAI;EACPC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;IAC5BP,MAAM,EAAEK,KAAK,CAACL,MAAM;IACpBU,QAAQ,EAAEL,KAAK,CAACK,QAAQ;IACxBG,GAAG,EAAER,KAAK,CAACL,MAAM,EAAEa,GAAG;IACtBC,MAAM,EAAET,KAAK,CAACL,MAAM,EAAEc,MAAM;IAC5BF,IAAI,EAAEP,KAAK,CAACL,MAAM,EAAEY;EACtB,CAAC,CAAC;EACF;EACA,IAAIP,KAAK,CAACK,QAAQ,EAAEK,MAAM,KAAK,GAAG,EAAE;IAClCzB,KAAK,CAAC0B,QAAQ,CAAC,iBAAiB,CAAC;IACjCxB,MAAM,CAACyB,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA5B,SAAS,CAAC;IACR6B,OAAO,EAAEb,KAAK,CAACK,QAAQ,EAAEE,IAAI,EAAEO,MAAM,IAAId,KAAK,CAACa,OAAO,IAAI,MAAM;IAChEE,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOb,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}