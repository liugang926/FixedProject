{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.atob.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\nimport Cookies from 'js-cookie';\nvar TokenKey = 'Asset_Management_Token';\n\n// 获取token\nexport function getToken() {\n  return Cookies.get(TokenKey);\n}\n\n// 设置token\nexport function setToken(token) {\n  return Cookies.set(TokenKey, token);\n}\n\n// 移除token\nexport function removeToken() {\n  return Cookies.remove(TokenKey);\n}\n\n// 检查是否已登录\nexport function isAuthenticated() {\n  return !!getToken();\n}\n\n// 设置token过期时间\nexport function setTokenWithExpiry(token) {\n  var expiryHours = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  return Cookies.set(TokenKey, token, {\n    expires: expiryHours / 24 // Cookies.set 接受天数作为过期时间\n  });\n}\n\n// 获取token过期状态\nexport function isTokenExpired() {\n  var token = getToken();\n  if (!token) return true;\n\n  // 如果需要检查token的具体过期时间，可以解析JWT token\n  try {\n    var payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.exp * 1000 < Date.now();\n  } catch (e) {\n    return true;\n  }\n}","map":{"version":3,"names":["Cookies","TokenKey","getToken","get","setToken","token","set","removeToken","remove","isAuthenticated","setTokenWithExpiry","expiryHours","arguments","length","undefined","expires","isTokenExpired","payload","JSON","parse","atob","split","exp","Date","now","e"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/auth.js"],"sourcesContent":["import Cookies from 'js-cookie'\r\n\r\nconst TokenKey = 'Asset_Management_Token'\r\n\r\n// 获取token\r\nexport function getToken() {\r\n  return Cookies.get(TokenKey)\r\n}\r\n\r\n// 设置token\r\nexport function setToken(token) {\r\n  return Cookies.set(TokenKey, token)\r\n}\r\n\r\n// 移除token\r\nexport function removeToken() {\r\n  return Cookies.remove(TokenKey)\r\n}\r\n\r\n// 检查是否已登录\r\nexport function isAuthenticated() {\r\n  return !!getToken()\r\n}\r\n\r\n// 设置token过期时间\r\nexport function setTokenWithExpiry(token, expiryHours = 24) {\r\n  return Cookies.set(TokenKey, token, {\r\n    expires: expiryHours / 24 // Cookies.set 接受天数作为过期时间\r\n  })\r\n}\r\n\r\n// 获取token过期状态\r\nexport function isTokenExpired() {\r\n  const token = getToken()\r\n  if (!token) return true\r\n  \r\n  // 如果需要检查token的具体过期时间，可以解析JWT token\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]))\r\n    return payload.exp * 1000 < Date.now()\r\n  } catch (e) {\r\n    return true\r\n  }\r\n} "],"mappings":";;;;;;;AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,IAAMC,QAAQ,GAAG,wBAAwB;;AAEzC;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,OAAOF,OAAO,CAACG,GAAG,CAACF,QAAQ,CAAC;AAC9B;;AAEA;AACA,OAAO,SAASG,QAAQA,CAACC,KAAK,EAAE;EAC9B,OAAOL,OAAO,CAACM,GAAG,CAACL,QAAQ,EAAEI,KAAK,CAAC;AACrC;;AAEA;AACA,OAAO,SAASE,WAAWA,CAAA,EAAG;EAC5B,OAAOP,OAAO,CAACQ,MAAM,CAACP,QAAQ,CAAC;AACjC;;AAEA;AACA,OAAO,SAASQ,eAAeA,CAAA,EAAG;EAChC,OAAO,CAAC,CAACP,QAAQ,CAAC,CAAC;AACrB;;AAEA;AACA,OAAO,SAASQ,kBAAkBA,CAACL,KAAK,EAAoB;EAAA,IAAlBM,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACxD,OAAOZ,OAAO,CAACM,GAAG,CAACL,QAAQ,EAAEI,KAAK,EAAE;IAClCU,OAAO,EAAEJ,WAAW,GAAG,EAAE,CAAC;EAC5B,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASK,cAAcA,CAAA,EAAG;EAC/B,IAAMX,KAAK,GAAGH,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACG,KAAK,EAAE,OAAO,IAAI;;EAEvB;EACA,IAAI;IACF,IAAMY,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACf,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAOJ,OAAO,CAACK,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}