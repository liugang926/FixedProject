{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nimport router from '@/router';\n\n// 创建axios实例\nvar service = axios.create({\n  baseURL: '/api',\n  // 使用 /api 前缀\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    var token = getToken();\n    if (token) {\n      config.headers['Authorization'] = \"Token \".concat(token);\n    }\n  }\n  return config;\n}, function (error) {\n  // 处理请求错误\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  return response.data;\n}, function (error) {\n  var _error$response;\n  console.error('API Error:', error.response);\n  var message = ((_error$response = error.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.message) || error.message;\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","router","service","create","baseURL","timeout","interceptors","request","use","config","state","user","token","headers","concat","error","console","log","Promise","reject","response","data","_error$response","message","type","duration"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\nimport router from '@/router'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: '/api', // 使用 /api 前缀\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    if (store.state.user.token) {\r\n      const token = getToken()\r\n      if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`\r\n      }\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // 处理请求错误\r\n    console.log(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => response.data,\r\n  error => {\r\n    console.error('API Error:', error.response)\r\n    const message = error.response?.data?.message || error.message\r\n    ElMessage({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,cAAc;AACvC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9B,UAAAC,MAAM,EAAI;EACR;EACA,IAAIV,KAAK,CAACW,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;IAC1B,IAAMA,KAAK,GAAGZ,QAAQ,CAAC,CAAC;IACxB,IAAIY,KAAK,EAAE;MACTH,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,YAAAC,MAAA,CAAYF,KAAK,CAAE;IACpD;EACF;EACA,OAAOH,MAAM;AACf,CAAC,EACD,UAAAM,KAAK,EAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,OAAO,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC/B,UAAAY,QAAQ;EAAA,OAAIA,QAAQ,CAACC,IAAI;AAAA,GACzB,UAAAN,KAAK,EAAI;EAAA,IAAAO,eAAA;EACPN,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACK,QAAQ,CAAC;EAC3C,IAAMG,OAAO,GAAG,EAAAD,eAAA,GAAAP,KAAK,CAACK,QAAQ,cAAAE,eAAA,gBAAAA,eAAA,GAAdA,eAAA,CAAgBD,IAAI,cAAAC,eAAA,uBAApBA,eAAA,CAAsBC,OAAO,KAAIR,KAAK,CAACQ,OAAO;EAC9DzB,SAAS,CAAC;IACRyB,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOP,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}