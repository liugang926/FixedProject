{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\n\n// 创建 axios 实例\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:8000',\n  // API 的 base_url\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    config.headers['Authorization'] = \"Token \".concat(getToken());\n  }\n  return config;\n}, function (error) {\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n  // 如果返回的是二进制数据，直接返回\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  return res;\n}, function (error) {\n  var _error$response;\n  console.log('err' + error);\n  var message = ((_error$response = error.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.error) || error.message || '请求失败';\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","getters","token","headers","concat","error","console","log","Promise","reject","response","res","data","responseType","_error$response","message","type","duration"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API || 'http://localhost:8000', // API 的 base_url\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    if (store.getters.token) {\r\n      config.headers['Authorization'] = `Token ${getToken()}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    console.log(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    // 如果返回的是二进制数据，直接返回\r\n    if (response.config.responseType === 'blob') {\r\n      return res\r\n    }\r\n    return res\r\n  },\r\n  error => {\r\n    console.log('err' + error)\r\n    const message = error.response?.data?.error || error.message || '请求失败'\r\n    ElMessage({\r\n      message: message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AACA,IAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,uBAAuB;EAAE;EAClEC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9B,UAAAC,MAAM,EAAI;EACR,IAAIZ,KAAK,CAACa,OAAO,CAACC,KAAK,EAAE;IACvBF,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,YAAAC,MAAA,CAAYf,QAAQ,CAAC,CAAC,CAAE;EACzD;EACA,OAAOW,MAAM;AACf,CAAC,EACD,UAAAK,KAAK,EAAI;EACPC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,OAAO,CAACO,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/B,UAAAW,QAAQ,EAAI;EACV,IAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA,IAAIF,QAAQ,CAACV,MAAM,CAACa,YAAY,KAAK,MAAM,EAAE;IAC3C,OAAOF,GAAG;EACZ;EACA,OAAOA,GAAG;AACZ,CAAC,EACD,UAAAN,KAAK,EAAI;EAAA,IAAAS,eAAA;EACPR,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC;EAC1B,IAAMU,OAAO,GAAG,EAAAD,eAAA,GAAAT,KAAK,CAACK,QAAQ,cAAAI,eAAA,gBAAAA,eAAA,GAAdA,eAAA,CAAgBF,IAAI,cAAAE,eAAA,uBAApBA,eAAA,CAAsBT,KAAK,KAAIA,KAAK,CAACU,OAAO,IAAI,MAAM;EACtE5B,SAAS,CAAC;IACR4B,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOT,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}