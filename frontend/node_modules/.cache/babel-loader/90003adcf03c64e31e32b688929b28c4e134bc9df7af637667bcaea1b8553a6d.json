{"ast":null,"code":"import Cookies from 'js-cookie';\nconst TokenKey = 'Asset_Management_Token';\nconst TokenExpireKey = 'Asset_Management_Token_Expire';\n\n// 获取token\nexport function getToken() {\n  const token = Cookies.get(TokenKey);\n  const expireTime = Cookies.get(TokenExpireKey);\n  if (token && expireTime && new Date().getTime() < parseInt(expireTime)) {\n    return token;\n  }\n  // token 过期或不存在，清除\n  removeToken();\n  return null;\n}\n\n// 设置token\nexport function setToken(token) {\n  // 设置24小时过期\n  const expire = new Date().getTime() + 24 * 60 * 60 * 1000;\n  Cookies.set(TokenKey, token);\n  Cookies.set(TokenExpireKey, expire.toString());\n}\n\n// 移除token\nexport function removeToken() {\n  Cookies.remove(TokenKey);\n  Cookies.remove(TokenExpireKey);\n}\n\n// 检查是否已登录\nexport function isAuthenticated() {\n  return !!getToken();\n}\n\n// 设置token过期时间\nexport function setTokenWithExpiry(token, expiryHours = 24) {\n  return Cookies.set(TokenKey, token, {\n    expires: expiryHours / 24 // Cookies.set 接受天数作为过期时间\n  });\n}\n\n// 获取token过期状态\nexport function isTokenExpired() {\n  const token = getToken();\n  if (!token) return true;\n\n  // 如果需要检查token的具体过期时间，可以解析JWT token\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.exp * 1000 < Date.now();\n  } catch (e) {\n    return true;\n  }\n}","map":{"version":3,"names":["Cookies","TokenKey","TokenExpireKey","getToken","token","get","expireTime","Date","getTime","parseInt","removeToken","setToken","expire","set","toString","remove","isAuthenticated","setTokenWithExpiry","expiryHours","expires","isTokenExpired","payload","JSON","parse","atob","split","exp","now","e"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/auth.js"],"sourcesContent":["import Cookies from 'js-cookie'\r\n\r\nconst TokenKey = 'Asset_Management_Token'\r\nconst TokenExpireKey = 'Asset_Management_Token_Expire'\r\n\r\n// 获取token\r\nexport function getToken() {\r\n  const token = Cookies.get(TokenKey)\r\n  const expireTime = Cookies.get(TokenExpireKey)\r\n  if (token && expireTime && new Date().getTime() < parseInt(expireTime)) {\r\n    return token\r\n  }\r\n  // token 过期或不存在，清除\r\n  removeToken()\r\n  return null\r\n}\r\n\r\n// 设置token\r\nexport function setToken(token) {\r\n  // 设置24小时过期\r\n  const expire = new Date().getTime() + 24 * 60 * 60 * 1000\r\n  Cookies.set(TokenKey, token)\r\n  Cookies.set(TokenExpireKey, expire.toString())\r\n}\r\n\r\n// 移除token\r\nexport function removeToken() {\r\n  Cookies.remove(TokenKey)\r\n  Cookies.remove(TokenExpireKey)\r\n}\r\n\r\n// 检查是否已登录\r\nexport function isAuthenticated() {\r\n  return !!getToken()\r\n}\r\n\r\n// 设置token过期时间\r\nexport function setTokenWithExpiry(token, expiryHours = 24) {\r\n  return Cookies.set(TokenKey, token, {\r\n    expires: expiryHours / 24 // Cookies.set 接受天数作为过期时间\r\n  })\r\n}\r\n\r\n// 获取token过期状态\r\nexport function isTokenExpired() {\r\n  const token = getToken()\r\n  if (!token) return true\r\n  \r\n  // 如果需要检查token的具体过期时间，可以解析JWT token\r\n  try {\r\n    const payload = JSON.parse(atob(token.split('.')[1]))\r\n    return payload.exp * 1000 < Date.now()\r\n  } catch (e) {\r\n    return true\r\n  }\r\n} "],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,MAAMC,QAAQ,GAAG,wBAAwB;AACzC,MAAMC,cAAc,GAAG,+BAA+B;;AAEtD;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,MAAMC,KAAK,GAAGJ,OAAO,CAACK,GAAG,CAACJ,QAAQ,CAAC;EACnC,MAAMK,UAAU,GAAGN,OAAO,CAACK,GAAG,CAACH,cAAc,CAAC;EAC9C,IAAIE,KAAK,IAAIE,UAAU,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGC,QAAQ,CAACH,UAAU,CAAC,EAAE;IACtE,OAAOF,KAAK;EACd;EACA;EACAM,WAAW,CAAC,CAAC;EACb,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,SAASC,QAAQA,CAACP,KAAK,EAAE;EAC9B;EACA,MAAMQ,MAAM,GAAG,IAAIL,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EACzDR,OAAO,CAACa,GAAG,CAACZ,QAAQ,EAAEG,KAAK,CAAC;EAC5BJ,OAAO,CAACa,GAAG,CAACX,cAAc,EAAEU,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC;AAChD;;AAEA;AACA,OAAO,SAASJ,WAAWA,CAAA,EAAG;EAC5BV,OAAO,CAACe,MAAM,CAACd,QAAQ,CAAC;EACxBD,OAAO,CAACe,MAAM,CAACb,cAAc,CAAC;AAChC;;AAEA;AACA,OAAO,SAASc,eAAeA,CAAA,EAAG;EAChC,OAAO,CAAC,CAACb,QAAQ,CAAC,CAAC;AACrB;;AAEA;AACA,OAAO,SAASc,kBAAkBA,CAACb,KAAK,EAAEc,WAAW,GAAG,EAAE,EAAE;EAC1D,OAAOlB,OAAO,CAACa,GAAG,CAACZ,QAAQ,EAAEG,KAAK,EAAE;IAClCe,OAAO,EAAED,WAAW,GAAG,EAAE,CAAC;EAC5B,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASE,cAAcA,CAAA,EAAG;EAC/B,MAAMhB,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;;EAEvB;EACA,IAAI;IACF,MAAMiB,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACpB,KAAK,CAACqB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAOJ,OAAO,CAACK,GAAG,GAAG,IAAI,GAAGnB,IAAI,CAACoB,GAAG,CAAC,CAAC;EACxC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}