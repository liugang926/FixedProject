{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  // url = base url + request url\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.state.user.token) {\n    // 让每个请求携带token\n    config.headers['Authorization'] = `Bearer ${getToken()}`;\n  }\n  return config;\n}, error => {\n  // 处理请求错误\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果自定义代码不是200，则判断为错误\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || 'Error',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 50008: 非法token; 50012: 其他客户端登录; 50014: token过期;\n    if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n      // 重新登录\n      store.dispatch('user/resetToken').then(() => {\n        location.reload();\n      });\n    }\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.log('err' + error);\n  ElMessage({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","store","getToken","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","state","user","token","headers","error","console","log","Promise","reject","response","res","data","code","message","type","duration","dispatch","then","location","reload","Error"],"sources":["C:/Users/ND/Desktop/Fixed_Project/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API || '/api', // url = base url + request url\r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    if (store.state.user.token) {\r\n      // 让每个请求携带token\r\n      config.headers['Authorization'] = `Bearer ${getToken()}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // 处理请求错误\r\n    console.log(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n    \r\n    // 如果自定义代码不是200，则判断为错误\r\n    if (res.code !== 200) {\r\n      ElMessage({\r\n        message: res.message || 'Error',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n\r\n      // 50008: 非法token; 50012: 其他客户端登录; 50014: token过期;\r\n      if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\r\n        // 重新登录\r\n        store.dispatch('user/resetToken').then(() => {\r\n          location.reload()\r\n        })\r\n      }\r\n      return Promise.reject(new Error(res.message || 'Error'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.log('err' + error)\r\n    ElMessage({\r\n      message: error.message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,cAAc;;AAEvC;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,MAAM;EAAE;EACjDC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,IAAIZ,KAAK,CAACa,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;IAC1B;IACAH,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUf,QAAQ,CAAC,CAAC,EAAE;EAC1D;EACA,OAAOW,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,OAAO,CAACO,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/BW,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpB1B,SAAS,CAAC;MACR2B,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,OAAO;MAC/BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,KAAK,IAAIF,GAAG,CAACE,IAAI,KAAK,KAAK,IAAIF,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;MAClE;MACAzB,KAAK,CAAC6B,QAAQ,CAAC,iBAAiB,CAAC,CAACC,IAAI,CAAC,MAAM;QAC3CC,QAAQ,CAACC,MAAM,CAAC,CAAC;MACnB,CAAC,CAAC;IACJ;IACA,OAAOZ,OAAO,CAACC,MAAM,CAAC,IAAIY,KAAK,CAACV,GAAG,CAACG,OAAO,IAAI,OAAO,CAAC,CAAC;EAC1D,CAAC,MAAM;IACL,OAAOH,GAAG;EACZ;AACF,CAAC,EACDN,KAAK,IAAI;EACPC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC;EAC1BlB,SAAS,CAAC;IACR2B,OAAO,EAAET,KAAK,CAACS,OAAO;IACtBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}