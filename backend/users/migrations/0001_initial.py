# Generated by Django 5.1.6 on 2025-02-13 03:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='权限名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='权限代码')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('display_name', models.CharField(blank=True, max_length=50, verbose_name='显示名称')),
                ('role', models.CharField(choices=[('admin', '管理员'), ('developer', '开发人员'), ('manager', '项目经理')], db_index=True, default='developer', max_length=20, verbose_name='角色')),
                ('department', models.CharField(blank=True, db_index=True, max_length=50, verbose_name='部门')),
                ('position', models.CharField(blank=True, max_length=50, verbose_name='职位')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator('^1[3-9]\\d{9}$', '请输入有效的手机号')], verbose_name='手机号')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='邮箱')),
                ('is_locked', models.BooleanField(default=False, verbose_name='是否锁定')),
                ('lock_reason', models.CharField(blank=True, max_length=200, verbose_name='锁定原因')),
                ('failed_login_attempts', models.IntegerField(default=0, verbose_name='登录失败次数')),
                ('last_failed_login', models.DateTimeField(blank=True, null=True, verbose_name='最后一次登录失败时间')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='最后登录IP')),
                ('entry_date', models.DateField(blank=True, null=True, verbose_name='入职日期')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='部门名称')),
                ('order', models.IntegerField(default=0, verbose_name='排序')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.department', verbose_name='上级部门')),
            ],
            options={
                'verbose_name': '部门',
                'verbose_name_plural': '部门',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, verbose_name='用户名')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('login_time', models.DateTimeField(auto_now_add=True, verbose_name='登录时间')),
                ('result', models.CharField(choices=[('success', '成功'), ('password_error', '密码错误'), ('user_not_exist', '用户不存在'), ('user_locked', '账户锁定'), ('ip_restricted', 'IP受限')], max_length=20, verbose_name='登录结果')),
                ('detail', models.CharField(blank=True, max_length=200, verbose_name='详细信息')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', '创建'), ('update', '更新'), ('delete', '删除'), ('export', '导出'), ('import', '导入'), ('other', '其他')], max_length=20, verbose_name='操作类型')),
                ('module', models.CharField(max_length=50, verbose_name='功能模块')),
                ('description', models.CharField(max_length=200, verbose_name='操作描述')),
                ('url', models.CharField(max_length=200, verbose_name='请求地址')),
                ('method', models.CharField(max_length=20, verbose_name='请求方法')),
                ('params', models.JSONField(null=True, verbose_name='请求参数')),
                ('ip', models.GenericIPAddressField(verbose_name='IP地址')),
                ('browser', models.CharField(max_length=200, verbose_name='浏览器')),
                ('os', models.CharField(max_length=200, verbose_name='操作系统')),
                ('status', models.BooleanField(default=True, verbose_name='执行状态')),
                ('error_msg', models.TextField(blank=True, verbose_name='错误信息')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='操作人')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='角色名称')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='角色代码')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('permissions', models.ManyToManyField(blank=True, to='users.permission', verbose_name='权限')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
            },
        ),
        migrations.CreateModel(
            name='DataScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', models.CharField(choices=[('all', '所有数据'), ('department', '本部门数据'), ('department_and_below', '本部门及以下数据'), ('personal', '个人数据'), ('custom', '自定义数据')], default='personal', max_length=20, verbose_name='数据范围')),
                ('departments', models.ManyToManyField(blank=True, to='users.department', verbose_name='自定义部门')),
                ('role', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
            ],
            options={
                'verbose_name': '数据权限',
                'verbose_name_plural': '数据权限',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.role', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户角色',
                'verbose_name_plural': '用户角色',
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(related_name='users', through='users.UserRole', to='users.role', verbose_name='角色'),
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, verbose_name='验证码')),
                ('type', models.CharField(choices=[('email', '邮箱验证'), ('phone', '手机验证')], max_length=10, verbose_name='验证类型')),
                ('target', models.CharField(max_length=100, verbose_name='验证目标')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('expires_at', models.DateTimeField(verbose_name='过期时间')),
                ('is_used', models.BooleanField(default=False, verbose_name='是否已使用')),
                ('attempts', models.IntegerField(default=0, verbose_name='尝试次数')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '验证码',
                'verbose_name_plural': '验证码',
            },
        ),
    ]
